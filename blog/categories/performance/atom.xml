<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: performance | Causes Engineering]]></title>
  <link href="http://causes.github.io/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://causes.github.io/"/>
  <updated>2014-04-08T16:46:51-07:00</updated>
  <id>http://causes.github.io/</id>
  <author>
    <name><![CDATA[Causes Engineers]]></name>
    <email><![CDATA[eng@causes.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing database queries made in RSpec]]></title>
    <link href="http://causes.github.io/blog/2014/04/08/testing-database-queries-made-in-rspec/"/>
    <updated>2014-04-08T14:35:00-07:00</updated>
    <id>http://causes.github.io/blog/2014/04/08/testing-database-queries-made-in-rspec</id>
    <content type="html"><![CDATA[<p>Recently, <a href="http://joelencioni.com">Joe</a> and I have been doing some performance work on <a href="https://www.causes.com/">causes.com</a> to
speed up the time it takes to generate a page on the server. Most of that work
meant reducing the number of database queries we make. Take the <a href="https://www.causes.com/henric">profile page</a>
for example. On that page, we list the most important campaigns you&rsquo;ve
participated in. Before we started optimizing it, we were making more than 10
queries per campaign listed. We added some pre-loading and caching and
managed to take all those database queries down by 90%. That in turn brought
the time it took to generate this page down from about a second to 200
milliseconds.</p>

<!-- more -->


<h2>Testing the avoidance of database queries</h2>

<p>In order to verify that the work we did had the effect we intended, and to
guard us against future regressions, we built a tool to use in our unit tests
that counts the number of database queries made by running a particular piece
of code. Here&rsquo;s an example:</p>

<p>```ruby
describe &lsquo;rendering a collection of items&rsquo; do
  let(:items) { Item.last(10) }
  subject { render_items(items) }</p>

<p>  context &lsquo;when the items have not been pre-loaded&rsquo; do</p>

<pre><code>it 'performs database queries' do
  expect { subject }.to make_database_queries
end
</code></pre>

<p>  end</p>

<p>  context &lsquo;when the items have been pre-loaded&rsquo; do</p>

<pre><code>before { preload_items(items) }

it 'does not perform any database queries' do
  expect { subject }.to_not make_database_queries
end
</code></pre>

<p>  end
end
```</p>

<p>The interesting part here is the <code>make_database_queries</code> <a href="http://rspec.info/">RSpec</a> matcher. It
hooks into <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> and detects all database queries made during the
execution of the block. If you don&rsquo;t expect queries, but some are made, the
spec will fail with a list of the queries made. This makes debugging much
simpler, since you can usually narrow down the query to a missing <code>includes</code>.</p>

<h2>Introducing the <code>db-query-matchers</code> gem</h2>

<p>We bundled the <code>make_database_queries</code> matcher into a
<a href="https://github.com/causes/db-query-matchers">reusable gem</a>. Next time you add a caching layer or fix an
N+1 query, make sure to add the performance improvement to your test suite!</p>

<p>Check out the project on Github:
<a href="https://github.com/causes/db-query-matchers">https://github.com/causes/db-query-matchers</a></p>
]]></content>
  </entry>
  
</feed>
