<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Causes Engineering]]></title>
  <link href="http://causes.github.io/atom.xml" rel="self"/>
  <link href="http://causes.github.io/"/>
  <updated>2014-02-23T09:34:09-08:00</updated>
  <id>http://causes.github.io/</id>
  <author>
    <name><![CDATA[Causes Engineers]]></name>
    <email><![CDATA[eng@causes.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visual Diffs With Diffux]]></title>
    <link href="http://causes.github.io/blog/2014/02/19/visual-diffs-with-diffux/"/>
    <updated>2014-02-19T15:57:00-08:00</updated>
    <id>http://causes.github.io/blog/2014/02/19/visual-diffs-with-diffux</id>
    <content type="html"><![CDATA[<p>Are you worried that your CSS changes will break the current design in
unexpected ways? Do you want to show a designer a page you&rsquo;ve been working on,
before and after your changes? Do you want to be able to quickly look back at
how things looked a month or a year ago?</p>

<p><a href="https://github.com/trotzig/diffux">Diffux</a> [dɪˈfjuːz] is a tool that generates and manages visual diffs of web
pages, so that you can easily see even the subtlest effects of your code
modifications.</p>

<!-- more -->


<h2>Visualizing change</h2>

<p>A scary part of writing CSS on a large website is that when changing styles on
one page, you might unknowingly break styles on another page. This <a href="https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming)">action at a
distance</a>
problem is something that most people who write CSS have come across. With this
in mind we came to conclude that an automated diff tool that compared the look
of a page before and after a change would be very helpful. Manually comparing
page after page is just too time-consuming.</p>

<p>We use Diffux to diff a large number of pages on our website
(<a href="https://www.causes.com/">causes.com</a>) after every deploy. It has helped us find style
regressions and bugs that we would have never found with a manual review
process.</p>

<h3>An example Diffux diff</h3>

<p>This is an example of a before and after snapshot of the Diffux UI
(Diffux runs in a browser, so we use it internally in the project too &ndash;
Inception style). The snapshot on the left is before our change, the snapshot
on the right is after our change and in between we have the generated visual
diff of the two snapshots. First, try to spot the difference by just looking at
the before and after snapshots. It&rsquo;s almost impossible. Now look at the visual
diff and look for anything in magenta. It reveals that the icons in the top
right corner of the thumbnails have changed slightly. <a href="https://github.com/trotzig/diffux/commit/564b520846825f6dea3770828d6c477aea8957cf">This commit
message</a>
explains more about what changed.</p>

<p><img src="http://causes.github.io/assets/2014-02-19-diffux-diff.png"></p>

<h2>Support for responsive diffs</h2>

<p><a href="https://www.causes.com/">Causes.com</a> is a responsive website which means that it adapts to the
available screen size of your device. On mobile, you&rsquo;ll be presented with a
(mostly) one-column layout. On your laptop, we use more of your screen estate
by using a sidebar and flowing things left-to-right. This is why <a href="https://github.com/trotzig/diffux">Diffux</a>
allows you to specify a list of viewport widths to use when taking snapshots.
Diffs are generated for each viewport, so you can easily see what effect your
changes had on a page in many screen sizes.</p>

<p><em>Setting to specify different viewport widths:</em></p>

<p><img src="http://causes.github.io/assets/2014-02-19-diffux-viewport.png"></p>

<p><em>Two snapshots of the same URL with different viewport widths (1024 and 320
pixels):</em></p>

<p><img src="http://causes.github.io/assets/2014-02-19-diffux-snapshots.png"></p>

<h2>Alternatives</h2>

<p>Before deciding to build <a href="https://github.com/trotzig/diffux">Diffux</a>, we scanned the open source market for some
alternatives. <a href="https://github.com/bslatkin/dpxdt">Dpxdt</a> looked promising, so we gave it a spin. It got the job
done, but the project looked abandoned (6 month old PRs hadn&rsquo;t received any
attention, last commit was in August 2013) and we couldn&rsquo;t get the test suite
to run locally. Plus, <a href="https://github.com/bslatkin/dpxdt">Dpxdt</a> is written in Python, and we are no Python
experts. So there was a bit of a hurdle in debugging and adding functionality.</p>

<h2>About</h2>

<p><a href="https://github.com/trotzig/diffux">Diffux</a> is released under the MIT License and is available on Github:
<a href="https://github.com/trotzig/diffux">https://github.com/trotzig/diffux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differentiate Environments with Different Favicons]]></title>
    <link href="http://causes.github.io/blog/2014/02/19/differentiate-environments-with-different-favicons/"/>
    <updated>2014-02-19T14:04:00-08:00</updated>
    <id>http://causes.github.io/blog/2014/02/19/differentiate-environments-with-different-favicons</id>
    <content type="html"><![CDATA[<p>Sally has been tasked with making the commenting feature in her company&rsquo;s
webapp be threaded up to 5 levels instead of only 2 levels. As she makes
adjustments to the code, she collects an unprecedented number of browser tabs.
Some of them point at her company&rsquo;s production site, while others point at her
development environment. In many of them, she enabled &ldquo;super-user&rdquo; mode, so she
could more freely play with her app while making her changes.</p>

<p>So she goes on coding and messing with the data for most of the afternoon.
She&rsquo;s about ready to wrap up and head home for the evening when her boss walks
in and asks, &ldquo;Sally, lots of comments have gone missing. Do you know what
happened?&rdquo; Sally felt like she had swallowed a sack of doorknobs. In the midst
of her coding spree, she mixed up some of her browser tabs and accidentally
deleted live data. A lot of live data.</p>

<!-- more -->


<hr />

<p>At <a href="https://www.causes.com">Causes</a>, I often have a number of tabs open. Much like Sally, many of these
are pointed at my development environment or the production environment. While
I haven&rsquo;t been as unfortunate as Sally and accidentally done something in
production, I noticed that I spent a fair amount of time searching through my
tabs for the one I was looking for. When pairing with my colleagues, I noticed
that they were spending a good amount of time doing the same thing. Although it
wasn&rsquo;t a serious time commitment by any means, it slowed me down regularly.
Sometimes, it was enough of a speed bump that took me out of my flow. I decided
that there must be a way to improve this situation.</p>

<p>The browser gives you two pieces of information in the tab: the page title and
the favicon. This information should provide you with enough context for you to
make a decision as to which tab you want to foist your full attention.</p>

<p>Since page titles are often the same between environments, that&rsquo;s not a very
useful way to differentiate between these types of tabs out of the box. I
considered adding a prefix to the page title in development, as you might see
with subject lines on email lists, but page titles are often hidden when you
have lots of tabs open. Additionally, page titles feel like page-specific
content, and we typically like things like that to be as similar as possible
between development and production.</p>

<p>Then I realized that we could pack this information into our favicon. The
favicon is the perfect place to put this because they are often indicators of a
domain, not a page. Also, favicons are the last piece of information to be
hidden when opening definitely way too many tabs.</p>

<p>I hit the command line and simply inverted the colors on our production favicon
using ImageMagick, added some configuration to our development environment to
use the inverted image, and I was up and running. Now it is much easier to
figure out which tab is the one I am looking for.</p>

<p>In a Rails environment, for example, you can make this magic happen by first
defining a constant in your application configuration that points to the
location of your production favicon file.</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FAVICON</span> <span class="o">=</span> <span class="s1">&#39;icons/favicon.png&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in your development environment configuration, override this constant to
point to a different favicon file:</p>

<figure class='code'><figcaption><span>config/environments/development.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FAVICON</span> <span class="o">=</span> <span class="s1">&#39;icons/favicon-inverted.png&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then simply consume the constant in your layouts and you should be good to go.</p>

<p>This quick adjustment is so easy to do and will make you and your team a little
bit faster every single day. It might even prevent some headaches. And, don&rsquo;t
worry about Sally—thankfully she had only soft-deleted the comments.  All of
the data was easily restored.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Bower with Rails]]></title>
    <link href="http://causes.github.io/blog/2014/01/03/integrating-bower-with-rails/"/>
    <updated>2014-01-03T10:00:00-08:00</updated>
    <id>http://causes.github.io/blog/2014/01/03/integrating-bower-with-rails</id>
    <content type="html"><![CDATA[<p>We tend to prefer convention over configuration, so when we first began using
<a href="http://bower.io/">Bower</a> to manage our front-end dependencies, we started with minimal
configuration. While this nicely put the files in the expected places, it was a
hassle actually using the assets in our Rails app.</p>

<p>Our basic initial approach was to symlink the assets that we wanted to
reference from the <code>bower_components</code> directory into <code>vendor/assets</code> where
Sprockets would notice them. While this worked in the short term, it was
tedious to set up new packages, and was likely to break if the required assets
were moved when upgrading dependencies.</p>

<p>Ultimately, this felt like a hack. We decided that there must be a better way.
Thankfully there is.</p>

<!-- more -->


<h2>Configuring Bower</h2>

<p>To get us out of the clunky situation of managing symlinks, we first wanted
Bower to store its files in a Railsy location. The right spot for this seemed
to be <code>vendor/assets/bower_components</code>. We chose <code>vendor/assets</code> because these
are third-party assets, and <code>bower_components</code> because it makes clear that
these assets are managed by Bower and shouldn&rsquo;t manually be meddled with.</p>

<p>Bower allows us to configure the directory it stores its files via the
<code>.bowerrc</code> file. Since we didn&rsquo;t have one yet, all we needed to do was add this
as a sibling to our <code>bower.json</code> file, which was in our app root:</p>

<figure class='code'><figcaption><span>.bowerrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;directory&quot;</span><span class="p">:</span> <span class="s2">&quot;vendor/assets/bower_components&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Configuring Rails</h2>

<p>Now that the assets were in a logical place, we wanted Rails to be able to find
them easily without us having to manage an army of symlinks. In our application
config, we have access to the list of paths that Sprockets checks for assets
that are imported in manifests. We simply needed to add the Bower components
path to that list:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using Bower Assets</h2>

<p>Now that we have wired up the critical pieces, we can reference Bower assets in
manifests, and Sprockets will pull them in for us.</p>

<figure class='code'><figcaption><span>Example application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//= require my_js_file</span>
</span><span class='line'><span class="c1">//= require bower_component_name/js_file</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example application.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">mixins&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">reset&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">bower_component_name/stylesheet&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The assets in <code>vendor/assets/bower_components</code> are not precompiled on their own
so they can only be referenced in manifests and cannot be served directly to
clients. However, we wanted to serve a couple of components individually and
not bundled with other assets in a pre-existing manifest, generally either
because of their size (<a href="http://d3js.org/">D3</a>) or because they were being served only to a subset
of clients (<a href="https://github.com/scottjehl/Respond">Respond</a>). For these cases, we created shim manifests that only
include the single file we want served:</p>

<figure class='code'><figcaption><span>Our shim d3.js manifest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Shim to coax vendor/assets/bower_components/d3/d3.js to be precompiled by</span>
</span><span class='line'><span class="c1">// the asset pipeline</span>
</span><span class='line'><span class="c1">//= require d3/d3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Alternatives</h2>

<p>There is a <a href="https://github.com/42dev/bower-rails">bower-rails gem</a> that provides a <acronym title="Domain Specific
Language">DSL</acronym> that allows you to manage Bower components via a
Bowerfile, similarly to how <a href="http://bundler.io/">Bundler</a> operates. Although it sounds pretty
slick, we were hesitant to add another dependency to our stack when the
alternative outlined above requires so little work to configure.</p>

<p>Additionally, <a href="https://rails-assets.org/">https://rails-assets.org</a> can be added as a gem source to your
<code>Gemfile</code>, which allows you to reference Bower packages via <code>gem
'rails-assets-BOWER_PACKAGE_NAME'</code>. We decided against this approach because it
seemed to add an unnecessary layer of indirection when again, the alternative
outlined above is so simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sassy Progressive Enhancement]]></title>
    <link href="http://causes.github.io/blog/2013/11/29/sassy-progressive-enhancement/"/>
    <updated>2013-11-29T15:50:00-08:00</updated>
    <id>http://causes.github.io/blog/2013/11/29/sassy-progressive-enhancement</id>
    <content type="html"><![CDATA[<p>A mobile-first approach to design can be good: it helps you focus and
potentially simplify your requirements, which can translate into a better user
experience. Likewise, a mobile-first approach to implementation can be good: it
puts the more expensive tasks on the shoulders of clients that are more likely
to be able to handle the extra load, which can also translate to a better user
experience.</p>

<p>At <a href="https://www.causes.com">Causes</a>, we have been building things with a mobile-first approach both
in terms of design and implementation with a goal of progressive enhancement.
Since switching to this mode on the technical side, we have noticed that our
code is easier to write and more coherent to read, both of which are big
benefits for the engineering team.</p>

<p>So we&rsquo;ve put together a little project that helps us write readable media
queries in this way. We call it <a href="https://github.com/causes/sass-enhance">sass-enhance</a>.</p>

<!-- more -->


<h2>sass-enhance In Action</h2>

<p>sass-enhance defines mixins for media queries, <code>enhance</code> and <code>degrade</code>.</p>

<p>These mixins each take a breakpoint as an argument, and a block of styles to
apply when that breakpoint is activated. Optionally, you can specify ranged
breakpoints using <code>until</code>.</p>

<p>Breakpoints can be named, as defined in the <code>$breakpoint-max-widths</code> variable
(e.g. &ldquo;tablet&rdquo;), or arbitrary widths (e.g. &ldquo;720px&rdquo;).</p>

<h3><code>enhance()</code></h3>

<p>The <code>enhance</code> mixin is used to apply styles to a selector as the viewport gets
wider. It can be used to progressively enhance a page. We prefer using
<code>enhance</code> over <code>degrade</code> because it is a mobile-first implementation that tends
to be simpler in its execution.</p>

<p>To adjust the padding from 1em to 2em at the desktop breakpoint and wider, you
could use the following SCSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> enhance</span><span class="p">(</span><span class="n">desktop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which compiles to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">960px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted to only apply a different amount of padding for only the tablet
viewport width and nothing wider or narrower, you could use the following SCSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> enhance</span><span class="p">(</span><span class="n">tablet</span> <span class="n">until</span> <span class="n">desktop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which compiles to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">641px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">959px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>degrade()</code></h3>

<p>There are some cases where <code>enhance</code> does not work or make sense. In these
cases, it is okay to use <code>degrade</code> to gracefully degrade the styles as the
viewport gets narrower.</p>

<p>To adjust the padding from 2em to 1em at the tablet breakpoint and narrower,
you could use the following SCSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> degrade</span><span class="p">(</span><span class="n">tablet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: this produces functionally equivalent styles as the first example.</p>

<p>Likewise, if you wanted to only apply a different amount of padding for only
the tablet viewport width and nothing wider or narrower, you could use the
following SCSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.my-selector</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> degrade</span><span class="p">(</span><span class="n">tablet</span> <span class="n">until</span> <span class="n">small-tablet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Installation</h2>

<p>The recommended way to get set up with sass-enhance is via <a href="http://bower.io">Bower</a>, the
front-end package manager. To do this, simply run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install sass-enhance
</span></code></pre></td></tr></table></div></figure>


<p>If your project uses Bower to manage its dependencies and you&rsquo;d like to save
sass-enhance as a dependency in your project&rsquo;s <code>bower.json</code> manifest file, add
the <code>--save</code> option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install --save sass-enhance
</span></code></pre></td></tr></table></div></figure>


<p>Once you have the files locally, you simply need to import it so it is
available to your stylesheets. At Causes, we are building a Rails app, so we
symlink sass-enhance into <code>vendor/assets/stylesheets/sass-enhance/</code> and
<code>@import</code> it ear the top of our SCSS files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">sass-enhance/sass-enhance&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Configuration</h2>

<p>Although sass-enhance will work just fine right out of the box, you may be
itching to configure it to fit your needs just right. For this purpose, we have
included a variable that you can set, called <code>$breakpoint-max-widths</code>. Just
make sure to set this variable <em>before importing sass-enhance</em> or your settings
will not work.</p>

<p>This variable is a comma separated list of breakpoint names and max-width
pairs. You can choose whatever names and widths you prefer. The default is
something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="na">$breakpoint-max-widths</span><span class="o">:</span> <span class="n">mobile</span>           <span class="mi">360</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">mobile-landscape</span> <span class="mi">500</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">small-tablet</span>     <span class="mi">640</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">tablet</span>           <span class="mi">959</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">desktop</span>          <span class="mi">99999</span><span class="kt">px</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, if you prefer media queries with more generic names, you are free to
configure it to suit your needs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="na">$breakpoint-max-widths</span><span class="o">:</span> <span class="n">small</span>  <span class="mi">400</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                        <span class="no">medium</span> <span class="mi">800</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                        <span class="no">large</span>  <span class="mi">1000</span><span class="kt">px</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We hope that you find this tool useful. Pull requests are welcome. <a href="https://github.com/causes/sass-enhance">View the
source on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Test Performance Matters]]></title>
    <link href="http://causes.github.io/blog/2013/11/06/why-test-performance-matters/"/>
    <updated>2013-11-06T17:50:00-08:00</updated>
    <id>http://causes.github.io/blog/2013/11/06/why-test-performance-matters</id>
    <content type="html"><![CDATA[<p>&ldquo;How fast are your tests?&rdquo;.  Have you ever had that question? Probably not.
Does performance matter for tests? Yes, and here&rsquo;s why: The time it takes from
you changing a bit of code until you get feedback on whether or not that code
works is crucial in knowing if your code is good or not. Let me illustrate by
two scenarios.</p>

<!-- more -->


<h3>Scenario 1: Slow feedback cycle</h3>

<p>Let&rsquo;s say your tests take 20 minutes to run. Some time ago developers got tired
of running the tests locally so you moved to a model where you run the tests in
30 minute intervals on your build server. Now you have just commited some code
that changes the default sort order for getting lists of users from the
database. You commit and push your code and start working on something else. An
hour later you get an email: &ldquo;Build failed&rdquo;. You quickly scan through the email
to see that 7 commits have been pushed since the last build and that this test
is failing: &ldquo;main_menu_has_correct_items&rdquo;. That doesn&rsquo;t look like your fault
(right?) so you continue working on that other thing. Meanwhile, two other
contributors to this build are scratching their heads for hours trying to
figure out why the menu isn&rsquo;t rendering correctly, only to find out that the
sort order for users was making the test fail.</p>

<h3>Scenario 2: Rapid feedback cycle</h3>

<p>Your tests are lightning fast. Every time you save your code, tests will be run
automatically and tell you whether or not you broke something. You change the
sort order for getting lists of users from the database and notice within
seconds that the &lsquo;main_menu_has_correct_items&rsquo; test is failing. &ldquo;Strange&rdquo;, you
think and revert your change just to make sure that it wasn&rsquo;t a fluke. Nope, no
fluke. The test is now passing. You make your change again and start
investigating why changing the user sort order had an effect on the main menu.
You quickly find that the menu was depending on the last item from a list of
users.</p>

<h2>Speed matters</h2>

<p>The above scenarios should make it obvious that performance matters for tests.
The examples are taken to the extremes, and you will probably find that your
company is somewhere in the middle in this spectrum. You might not reach
instantaneous feedback as in scenario 2, but you can certainly aim to get
closer to that. At <a href="https://www.causes.com">Causes</a>, we are down to seconds in
most scenarios. Our entire test suite takes about 5 minutes to run, but clever
engineers have created a smart tool called <code>relevant-tests</code> that tells you with
high confidence what tests you need to run, and you can run only those tests in
seconds through the help of <a href="https://github.com/burke/zeus">Zeus</a>, a
Rails daemon that speeds up most Rails-related tasks by keeping a runtime
environment hot at all times, and cloning that environment when you need it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a Successful Working Group]]></title>
    <link href="http://causes.github.io/blog/2013/11/06/running-a-successful-working-group/"/>
    <updated>2013-11-06T15:24:00-08:00</updated>
    <id>http://causes.github.io/blog/2013/11/06/running-a-successful-working-group</id>
    <content type="html"><![CDATA[<p>Giving structure to an agile engineering team is hard. You want people to work
on the things that they are most interested in without losing focus on the main
goal of building a great product. No matter how you split your organization
into teams, you will miss covering certain areas of interest. This is where
working groups can come into play.</p>

<!-- more -->


<p>We are a diverse group of people at <a href="https://www.causes.com">Causes</a>. People
with different backgrounds, knowledge and interests make up the engineering
team. Even though product teams collaborate on a daily basis, we’ve noticed
that members with shared interests wanted to get together in a slightly more
formal way than over a cup of imported, light roast, deliciously smooth
pour-over coffee (<a href="https://twitter.com/dgouldin">@dgouldin</a> can tell you more
about that&hellip;).  This is where working groups come into play.</p>

<p>Running a working group is a great way to gather people with shared interests
and allow people to strengthen skills within a certain area.  Our working
groups are made up of individuals with a self-identified interest that they
share with others. We currently run four working groups that cover Front-end
Technologies, System Architecture, Testing, and Security. Anyone is welcome to
join the groups, even people outside the engineering team.</p>

<h2>Goals</h2>

<p>We believe the main goal of a working group is to come up with practices and
tools that the rest of the organization can benefit from. In our company, we
often talk about <em>force multipliers</em>. By influencing others, you multiply your
force. A good working group is a force multiplier. This is what we think is
part of that mission:</p>

<h3>Export knowledge to the rest of the team</h3>

<p>Members of the working group should strive to have a shared understanding about
what to use, when to use it, and how to use it. At
<a href="https://www.causes.com">Causes</a>, this knowledge spreads throughout the
organization through tech talks, code inspections, blog posts, emails, pair
programming, and other means of collaboration.</p>

<h3>Resolve controversial decisions</h3>

<p>Let’s face it — building a product inevitably includes having to make
decisions. These decisions can often be controversial. A working group can help
you resolve the tension by structuring the decisions that need to be made.</p>

<h3>Identify areas for future research and experimentation</h3>

<p>A working group is a great place for discussing how different practices,
processes and framework/tools could be used to solve problems. We always
produce action items at our meeting, and these often aim at investigating some
area and coming up with a concrete plan to be shared at the next meeting.</p>

<h2>Getting the most out of a working group</h2>

<p>Even though groups are self-organized and voluntary, we have found that some
structure is important to be successful.</p>

<h3>Meet regularly</h3>

<p>We meet every other week for 30-60 minutes. This should be enough for most
working groups, but situations may arise that call for more attention, and a
tighter meeting schedule.</p>

<h3>Stick to an agenda</h3>

<p>Preferably, circulate a meeting agenda ahead of time so that people can prepare
for the meeting. If you find yourself without having a meeting agenda (we all
know this can happen&hellip;), spend the first few minutes of the meeting
collaboratively creating one.</p>

<h3>Keep track of action items</h3>

<p>The first item on the agenda should be following up on action items from the
previous meeting. During the meeting, take notes on all the action items that
are decided. Follow up by publishing the meeting notes in written form. This
can be an email, a document, a wiki article or any other searchable form of
documentation.</p>

<h3>Use a mailing list</h3>

<p>This is great for circulating meeting notes and action items from the meeting.
And it’s ideal for discussions that may arise in between meetings. We use
Google Groups to create and manage our lists.</p>

<p>When expertise is spread out across a product-oriented team, you want the
subject experts to get together and make decisions. These subject experts can
then take the decisions out to their respective teams to share the knowledge.
Working groups help enable this and are a valuable practice for any
organization that needs to share knowledge that cross-cuts the formal team
structure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to avoid designing at the water cooler]]></title>
    <link href="http://causes.github.io/blog/2013/09/21/how-to-ask-for-design-feedback/"/>
    <updated>2013-09-21T16:22:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/09/21/how-to-ask-for-design-feedback</id>
    <content type="html"><![CDATA[<p>I recently had an experience I expect is common for designers who work at startups: I presented a well-polished mockup to a key stakeholder late in the design phase of a project and he told me flat out that the design didn’t address his users’ needs. This, after I’d met with him twice before.</p>

<p>This was my first project at my new company and I was still getting to know everybody and their roles, but excuses aside, I quickly realized this happened because my team never got our business stakeholders together at the beginning of the project. Because we didn’t make time to discuss the problem we were trying to solve, everybody was operating under their own assumptions. If we were going to improve communication on our next project, my product manager and I needed to discuss how to set expectations about our design process; we needed to be more intentional about when we got feedback from which groups of stakeholders, and what kind of feedback we were seeking from each group. If we were successful, we’d be able to get consensus quicker and reduce iterations needed to get to a solution that was ready to be specced.</p>

<!-- more -->


<p>This is our refined approach to the design phase of product development. I realize it applies to our particular context, but my hope is to encourage you to reflect on how you gather feedback on your own projects. You don’t have to subject yourself to every feature request from a co-worker or user, and you don’t have to design your product a certain way because your VP said so. You have the power to guide the conversation and to get buy-in in a way that’s less stressful, more democratic, and more efficient.</p>

<h1>Identify the problem</h1>

<p>At the outset of any project my product manager will have identified the core problem she’s trying to solve for our users (rather than prescribing a feature). Ideally, she’s done the work of gathering the necessary user research (both qualitative and quantitative) to validate the problem is, in reality, a problem for our users. She will have also prioritized this problem against business goals, ensuring it’s a problem that <em>needs</em> to be solved, and that it’s one that should be solved now rather than later. The result of this work is that our standup team has a clear understanding of <em>why</em> we should be solving that problem. Once we’re in agreement, our PM takes the following steps to get buy-in on the goal of the project from key stakeholders at the company:</p>

<h2>Write a design brief</h2>

<ul>
<li>A design brief is a one-pager that explains what we’ll be doing for the project. The product teams at my company have agreed that a good brief provides a one-sentence goal statement; limiting the goal to one sentence is important because it should be easy for the designer to reference by memory during any conversation throughout the design process. If I can’t remember the goal of the project without referencing the brief, that’s a strong indicator of scope creep.</li>
<li>The brief should also identify the target users I’ll be designing for. For example, is this release limited to a beta group or will it be released to all users?</li>
<li>I love constraints, so I’m glad that with every brief, my PM lists criteria under “An effective design should…”. An example might be, “allow organizers to understand who is in their audience (age/gender/location) so they can develop ideas for more relevant content.” Notice this criterion doesn’t prescribe how the feature should be designed—that’s my job, after all.</li>
<li>The last aspect of a good brief is defining how we’ll measure success. There’s usually a separate meeting with our research and data teams to get their feedback on this section. With our research lead, my PM tries identify any qualitative feedback that needs to be captured and how we’ll go about recording, analyzing, and reporting that feedback. And with our data lead, our goal should be to gain an understanding of the data infrastructure that’s in place or that will need to be built to collect, analyze, and report key success metrics for the project. I also make sure my PM has put time on the roadmap in an upcoming quarter to process qualitative and quantitative feedback among our team and stakeholders—<em>before</em> we begin our next iteration of the product.</li>
</ul>


<h2>Kickoff the business stakeholder meeting</h2>

<p>Once the brief is ready, we present it to business stakeholders, who represent the diverse interests of our company (e.g., Business Development, Marketing, User Research, and Strategic Partnerships). The outcome of the meeting is agreement on the goal and the design criteria for the project. This ensures everybody has the opportunity to speak their mind about the problem we’re trying to solve. I find it’s particularly important to get everybody in the same room, not just have them on a call or to speak with them individually. Doing so facilitates the kind of constructive conversation that brings up all the potential issues surrounding the problem, such that we carefully craft the goal statement to encapsulate all these nuances.</p>

<h2>Finalize the design brief</h2>

<p>Once agreement is reached, we share an updated design brief with all stakeholders. I can now refer to this brief to for solution exploration and general design direction for the project. This document also gives me tremendous leverage to articulate why certain design decisions are best—given the goal and constraints that were agreed upon by the business stakeholders. If I’ve any questions or concerns or am unclear about the goal statement or any of the design criterion, I make sure to address those with my PM before I begin sketching UIs.</p>

<h1>Design potential solutions</h1>

<p>You might be familiar with Apple’s 10-3-1 design process. The idea is that an Apple designer must come up with 10 entirely different mockups for any new feature, before whittling down to 3, further refining those directions, and finally settling on the best design. This process encourages breadth over a linear iterative process, and helps ensure that the best possible solutions have been given due consideration. The following steps are how my team puts 10-3-1 into practice.</p>

<ol>
<li><strong>Explore with sketches</strong>: My goal is to sketch 10 concepts that attempt to solve the problem articulated in the design brief. Depending on the scope of the project, I might not be able to generate 10, but the aspiration is to generate as many potential solutions as possible. I work quickly in Illustrator, so I draw thumbnails on paper to get the gists of various approaches, and then move to wireframes.</li>
<li><strong>Review with standup team</strong>: Once those sketches are ready, I review each exploration with my engineers and PM, making sure to address how each solution addresses the project goal and how aspects of the design address each design criterion. We then pick 3 concepts that best solve the problem and can be implemented in the amount of time allocated on the product roadmap.</li>
<li><strong>Review with Tech and Creative</strong>: At this point, it’s important to get feedback from implementation experts (e.g. leadership from Product, Engineering, Creative/Design) and then refine the three options in light of technical constraints such as database infrastructure and front-end development costs, as well as constraints regarding our branding and user experience.</li>
</ol>


<h2>Identify the best solution</h2>

<ul>
<li><strong>Review wireframes with business stakeholders</strong>: By now I have a set of 3 detailed wireframes. I personally print them out on A3 and post them on poster board because my stakeholders are all in the same office; you might need a different presentation approach if you’re team is distributed. My goal with this meeting is to review each solution and gain consensus on which design best solves for the goal articulated in the design brief. With the direction agreed upon, all design feedback from this meeting on should be focused on execution details (i.e. information hierarchy, messaging, and visual and interaction design).</li>
<li><strong>Conduct usability research</strong>: Ultimately, real users are the people I trust to help me determine whether my design is any good. During the tests I’m trying to discern issues users have with comprehension, navigation, and sentiment. I like to capture this kind of feedback at this point in the process before investing lots of time in the details of hi-fi mockups or prototypes. Since researchers are usually few in numbers or nonexistent in many organizations, you’ll might be the one doing this research. If so, be sure to reference the canonical usability book <a href="http://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/ref=dp_ob_title_bk">Don’t Make Me Think</a> by Steve Krug—if you haven’t already—for more insight into usability heuristics for web and mobile, as well as for solid testing methodologies.</li>
<li><strong>Make a functional prototype (optional)</strong>: Sometimes my team needs to validate a design with real content or real data—there might be too many variables that could break the design. When that’s the case, I make a point to pair with my engineering team to build a barebones prototype that simulates the UX. That said, sometimes a “prototype”, per se, isn’t necessary. I currently work on a dashboard product and when I’ve new projects, sometimes my PM runs SQL queries and generates various charts in Excel, which gives us a pretty good approximation of what our users would see.</li>
</ul>


<h1>Ship it</h1>

<ul>
<li><strong>Mock up hi-fis</strong>: Having validated that that my design won’t be entirely confusing to real users or fail under poor content, I move on to hi-fi mockups that account for all the states and transitions that my engineering team will need to build. These include zero states, changes in calls-to-action based on the user type and information to be displayed, as well as the nuances of particular transition. (I try to include responsive states, if applicable.) During this phase it’s important to regularly put your mocks through review with your design team because they will give you feedback on aspects of the design that other team members can’t give you. I’ve also found it tremendously valuable to my growth as a designer to set aside time to pair with another (senior) designer on the details of the design. As Charles Eames said, <strong>“The details are not the details. The details make the design.”</strong></li>
<li><strong>Write the spec</strong>: Once the mocks are done, my PM uses them to write a spec that fully defines the implementation of the design. The spec is a detailed glossary and set of instructions written specifically for the engineering team so that they don’t have to guess at what they’re supposed to be building. While my PM is writing the spec, I take responsibility for reading it and commenting where my PM has interpreted the mockups differently than I intended—the design phase isn’t over until the design has shipped.</li>
<li><strong>Build &amp; ship awesomesauce</strong>: I also take responsibility for talking regularly with my engineers during the implementation phase. I attend daily scrum team standups, sprint planning and storytime meetings, and sprint retrospectives, when I get to see the progress of the design in code and make sure it’s to spec. Even if your organization doesn’t use an agile methodology, communication issues come up during all points of the product development cycle, and engineering work is no exception, so you should be talking with your engineers regularly while they’re building out your designs.</li>
</ul>


<h1>Iterate</h1>

<p>Once my design has shipped, I make sure my PM and I have set aside time to take a look at all the feedback and analytics that have been produced by our users, and to meet with our team and stakeholders to make sense of it all. Our goal is to distill all that information into some key insights that can inform decision making for future iterations of the product/feature we shipped.</p>

<p>Coming full circle, these insights help to fill out the design criteria of our next brief, providing us with strong evidence for justifying our product strategy and roadmap, and giving us confidence and leverage with our stakeholders at the beginning of every project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Four Styles of Function Organization]]></title>
    <link href="http://causes.github.io/blog/2013/09/11/four-styles-of-object-organization/"/>
    <updated>2013-09-11T13:48:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/09/11/four-styles-of-object-organization</id>
    <content type="html"><![CDATA[<p>In object-oriented code, there are several choices for where to put a
new function, and each choice has its pros and cons.  These choices
repeat themselves over and over in a codebase, so it&rsquo;s worth reviewing
the tradeoffs we make on a daily basis.</p>

<!-- more -->


<h2>Methods directly on core models</h2>

<p>In <abbr title="Object Oriented Programming">OOP</abbr> frameworks
like Rails, a method&rsquo;s default home is the class that holds its state.
Suppose that the <code>User</code> class has Facebook friends, Twitter followers,
and LinkedIn connections.  The simplest approach is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_friends</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twitter_followers</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">linkedin_connections</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># invocation is:</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">facebook_friends</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The pros of this arrangement are its simplicity and obviousness.  All of
the methods on <code>User</code> can be found explicitly listed in the <code>user.rb</code>
file.</p>

<p>The problem with putting everything in one model is that eventually it
contains many inessential features.  The pathological case looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method0</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method1</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method2</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twitter_method0</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twitter_method1</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twitter_method2</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">linkedin_method0</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">linkedin_method1</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">linkedin_method2</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the <strong>obese model</strong> problem.  Too much code in one model and
too little organization makes a monolithic <code>User</code> class a poor unit of
organization.  An obese class is hard to understand because it contains
too much unstructured code inside it.  Consumers of obese classes are
also harder to understand, because the dependency between the consumer
and the consumed is defined in terms of a large, imprecise concept (the
obese model), rather than a small and precise one.</p>

<p>Putting methods directly into core models is a simple, direct and
default solution that works well for small situations.  By the
<a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a>
principle, it is probably still the best place to start.  However for
large projects, the downsides of this organization start to show.</p>

<p>In Ruby-land, a proliferation of concerns inside an object often leads
to a second style of code organization: mixins.</p>

<h2>Mixins</h2>

<p>Ruby supports mixins as a form of code reuse and concise organization.
Mixins declare code separately and then include them directly into
another class.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Facebook</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method0</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method1</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method2</span><span class="p">;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Facebook</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># invoking:</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">facebook_method0</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mixins can improve both organization and code reuse.  In this example,
the Facebook-related methods are grouped together in one place, and
separated out from <code>User</code>.  The <code>Facebook</code> module can then be mixed into
a variety of other classes.  In this organization, the pros are that the
related methods are grouped into one place (the <code>Facebook</code> module),
keeping both the individual concern and the target class (<code>User</code>)
cleaner.</p>

<p>The first problem with mixins is that <code>User</code> objects now have methods
that cannot be found directly in <code>User</code>.  In order to figure out how
<code>User</code> got <code>facebook_method0</code>, and what <code>facebook_method0</code> does, you
can&rsquo;t see it by looking at <code>User</code>; you have to realize it&rsquo;s getting
<code>include</code>d, usually by grepping the entire codebase for
<code>facebook_method0</code> <a href="#notes">&#91;1&#93;</a>, which is unfortunate.  This
dislocation also increases the chances of method name collision
between the mixin and the host class.</p>

<p>A second problem with mixins is that they tend to have mysterious and
implicit dependencies upon their host classes, especially if they were
first written coupled-into the host, and then extracted without
generalizing.  Mixins used only once are particularly prone to this
&ldquo;separation is not organization&rdquo; problem.</p>

<p>From the outside, the mixin solution looks structurally identical to
just putting all the methods in the object: you see an object with a
ton of methods on it.  Thus mixin solutions share basic properties
with a large model, but with a tradeoff:</p>

<ul>
<li>Better organization of a single concern into a single place</li>
<li>Some code reusability</li>
<li>Worse clarity on where methods are coming from</li>
<li>Often worse clarity on code flow, since mixin methods are interacting
with base class methods, and you&rsquo;ll find yourself ping-ponging between
reading the two files.</li>
</ul>


<p>Mixins can make code more concise, and somewhat better organized, but
often at the cost of the code being much less clear.</p>

<p>Mixins often prompt people to turn to <em>delegation</em>.</p>

<h2>Delegation</h2>

<p>Because mixins are sometimes frustratingly invisible, we also see
people take an opposing approach: explicitly delegating functionality
to underlying objects.  The separately concerned functionality goes
into its own class/module.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Facebook</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method0</span><span class="p">(</span><span class="n">user</span><span class="p">);</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method1</span><span class="p">(</span><span class="n">user</span><span class="p">);</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method2</span><span class="p">(</span><span class="n">user</span><span class="p">);</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># basic delegation</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method0</span>
</span><span class='line'>    <span class="no">Facebook</span><span class="o">.</span><span class="n">method0</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method1</span>
</span><span class='line'>    <span class="no">Facebook</span><span class="o">.</span><span class="n">method1</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">facebook_method2</span>
</span><span class='line'>    <span class="no">Facebook</span><span class="o">.</span><span class="n">method2</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># invoking:</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">facebook_method0</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The strength of this organization is that the individual <code>Facebook</code>
concern is clearly organized into its own module, and explicitly
called from <code>User</code>.  This improves organization, reusability, and
simplicity of the execution path.  One downside is that <code>User</code> is back
to having every possible method within it, though most of them are
mere portals to the separate module.</p>

<p>From the outside the <code>User</code> class still looks the same: it has a ton of
methods on it.  So the cons for this style of organization remain mostly
the same as the original &ldquo;shove all the methods in the class.&rdquo;  On the
plus side, there is slightly less complexity inside <code>User</code> itself,
because some has been separated out into <code>Facebook</code>.</p>

<p>This is a verbose but somewhat clearer organization of the code&mdash;if
you like delegation, there are several slightly less verbose
approaches available <a href="#notes">&#91;2&#93;</a>.  But delegation&rsquo;s
verbosity and continued coupling of everything into <code>User</code> still call
out for a better alternative.</p>

<h2>Namespaces</h2>

<p>The persistent problem above is dealing with peripheral functionality
such as <code>Facebook</code> coupled into core functionality such as <code>User</code>.  Even
if internally a class has been cleaned up to only delegate methods, the
external complexity of the class has not improved: consumers of <code>User</code>
still see a sprawling and complex interface of functions.</p>

<p>We can clean up massive classes to have smaller and more specialized
interfaces, by splitting up concerns into namespaces like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Facebook</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method0</span><span class="p">(</span><span class="n">user</span><span class="p">);</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method0</span><span class="p">(</span><span class="n">user</span><span class="p">);</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method0</span><span class="p">(</span><span class="n">user</span><span class="p">);</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># invoking</span>
</span><span class='line'><span class="no">Facebook</span><span class="o">.</span><span class="n">method0</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most important part of this arrangement is that instead of methods
being inside <code>User</code>, they&rsquo;re called from the outside, from <code>Facebook</code>,
which takes a user.</p>

<p>The pros of this organization are that the separate concern (of
Facebook, of Twitter, etc.) has finally truly been extracted out of
<code>User</code>.  There is no crowding inside <code>User</code>, no implicit method
declarations, and all of the code for Facebook is inside the <code>Facebook</code>
module.</p>

<p>This addresses most of the original concerns.  The disadvantage in
this situation are that this could eventually proliferate into many
fragmented modules, and that there is no longer a single home for for
user-related method declarations.</p>

<p>Using namespaces has a variety of structural advantages, which we&rsquo;ll
treat in a different article.  For now we hope to have shown that,
strictly for basic comprehension, there are tradeoffs worth
considering for consolidating vs. separating code.</p>

<h2>Conclusion</h2>

<p>Code organization choices are deceptively mundane: they seem like
small decisions, but have compounding long term impacts on the
malleability of our code.  Because we think and talk in terms of code,
clear code help us understand clearly, move quickly and reason
correctly.  This makes organization a fundamental investment we can
make in our software.</p>

<h2>Notes</h2>

<p><a name="notes"></a></p>

<p>&#91;1&#93; You can also find a method definition via</p>

<pre><code>my_object.method(:my_method_name).source_location
</code></pre>

<p>&#91;2&#93; There are terser delegation patterns; Rails comes with a
  <code>delegate</code> method, and the Ruby standard lib has a <code>Delegator</code>
  class, a <code>SimpleDelegator</code> class, a <code>Forwardable</code> module, which can
  all be used for various styles of delegation.</p>

<p>Special thanks to Andrew Berls, Jeremy Dunck, Preston Guillory, Greg
Hurrell,  Joe Lencioni, and Nebs Petrovic for their thoughts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing side-effects with the Pub-Sub model]]></title>
    <link href="http://causes.github.io/blog/2013/08/08/managing-side-effects-with-the-publish-subscribe-model/"/>
    <updated>2013-08-08T10:00:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/08/08/managing-side-effects-with-the-publish-subscribe-model</id>
    <content type="html"><![CDATA[<p>Over time, large-scale object-oriented systems tend to produce <a href="http://en.wikipedia.org/wiki/God_object">God
Objects</a>. These are classes which know
too much or do too much. They have connections to disparate and varied parts of
the system. They depend on everything, and everything depends on them. They make
systems slow to work with, intractable and hard to modify. They insidiously
undermine and resist our efforts to carry out our core task as engineers:
decomposing complex problems into smaller subproblems that are more easily
solved.</p>

<p>At <a href="http://www.causes.com">Causes</a> there are some concepts that are
front-and-center in our product: users, their campaigns and the actions
they create to make an impact (things like petitions, fundraisers and pledges).
The concepts are so core that they have a tendency to become God Objects unless
we diligently work to prevent them accruing more and more functionality.</p>

<p>We&rsquo;ve lately applied the
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Pub-Sub</a>
(Publish-Subscribe) model to our Ruby code, applying the familiar event-based
patterns that we know from JavaScript to the server side, in an effort to reduce
the tight coupling that some of these God Objects have to other parts of the
system. With a simple, framework-agnostic Ruby library, we&rsquo;ve been able to
significantly tame some of the complexity around these classes, and we&rsquo;ve
released it as a Ruby gem, <a href="https://github.com/causes/pubsubhub">PubSubHub</a>.</p>

<!-- more -->


<h2>A case study in managing side-effects: taking action</h2>

<p>When a user takes action on our site by, say, signing a petition, there is
potentially a slew of side-effects:</p>

<ul>
<li>we persist a record of the signature to a <code>signatures</code> table in the
database, and an <code>ActionCredit</code> (effectively a hundreds-of-millions-of-rows
journal of all action-taking activity on our site)</li>
<li>counter-caches tick up</li>
<li>stats events are generated and dispatched to one or more tracking systems</li>
<li>a recruiter may receive an on-site notification or an email</li>
<li>invitations may be marked as accepted (in the case of the recruiter) or
&ldquo;indirectly accepted&rdquo; (in the case of other, multiple inviters)</li>
<li>Facebook Request objects may be cleared out</li>
<li>feed events are generated and propagated to feeds</li>
<li>a custom <a href="https://developers.facebook.com/docs/opengraph/">Open Graph</a>
action is published</li>
<li>if the action pushed the campaign over a milestone, a milestone event may be
generated, which itself could result in feed events being propagated, onsite
notifications, and an email to the campaign organizer</li>
<li>if the action is sponsored by a brand, the signature could trigger a
donation to a nonprofit (which itself would have other side-effects)</li>
</ul>


<p>And this is only scratching the surface. Having the <code>Action</code> class know about
all these collaborators effectively makes it depend on them just as much as they
depend on it, and it places the class squarely within &ldquo;God Object&rdquo; territory.</p>

<h2>Using PubSubHub</h2>

<p>With <code>PubSubHub</code> we have a centralized registry of events, together with the
listeners that wish to be informed of those events. Our <code>Action</code> class now just
has to make a call to <code>PubSubHub.trigger</code> to let its collaborators know that
something important happened:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">take_action</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">recruiter</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="c1"># core action-taking mechanics go here...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># and secondary side-effects occur as a result of...</span>
</span><span class='line'>  <span class="no">PubSubHub</span><span class="o">.</span><span class="n">trigger</span> <span class="ss">:took_action</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">metadata</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This greatly reduces the clutter and makes the separation between core mechanics
and secondary side-effects clear.</p>

<p>Listener registration looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">PubSubHub</span><span class="o">.</span><span class="n">register</span><span class="p">(</span>
</span><span class='line'>  <span class="n">took_action</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">AlertBanner</span><span class="p">,</span>                  <span class="ss">async</span><span class="p">:</span> <span class="kp">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">FacebookRequest</span><span class="p">,</span>              <span class="ss">async</span><span class="p">:</span> <span class="kp">true</span>  <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">InvitationManager</span><span class="p">,</span>            <span class="ss">async</span><span class="p">:</span> <span class="kp">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">Profile</span><span class="p">,</span>                      <span class="ss">async</span><span class="p">:</span> <span class="kp">true</span>  <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">StatsManager</span><span class="p">,</span>                 <span class="ss">async</span><span class="p">:</span> <span class="kp">true</span>  <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">AnalyticsManager</span><span class="p">,</span>             <span class="ss">async</span><span class="p">:</span> <span class="kp">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">Campaign</span><span class="p">,</span>                     <span class="ss">async</span><span class="p">:</span> <span class="kp">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">listener</span><span class="p">:</span> <span class="no">NotificationDistributor</span><span class="p">,</span>      <span class="ss">async</span><span class="p">:</span> <span class="kp">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="c1"># etc ...</span>
</span><span class='line'>  <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="c1"># other event types here...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We considered making listener registration more distributed, via a DSL that
could be sprinkled into other classes, but in the end having the central
registry provides us with a nice inventory of the relationships and dependencies
between different parts of the system. It also conveniently avoids load-order
issues in the context of a large Rails app, whose loading behavior (eager vs
lazy, cached vs uncached) is different between development and production; we
can just stick the registration in an initializer and be done with it.</p>

<p>Note that with this change we&rsquo;ve inverted the dependencies such that the
all-important <code>Action</code> class no longer depends on a bunch of other classes;
rather, those other classes depend on it. From the perspective of the <code>Action</code>
class, this is a good thing: if your goal is to build something that is both
robust and useful, depending on as little as possible and having others depend
on you is a good thing.</p>

<p>One other nicety of this system is that it gives us a straight-forward way to
divide side-effects into the urgent and the non-urgent, the latter being run
asynchronously.</p>

<p>The final piece of the puzzle are the various listeners. By convention, they
implement a handler of the form <code>handle_&lt;event_name&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">handle_took_action</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="n">campaign</span> <span class="o">=</span> <span class="n">action</span><span class="o">.</span><span class="n">campaign</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="n">user</span>     <span class="o">=</span> <span class="n">metadata</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Follow</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">followed_id</span><span class="p">:</span>   <span class="n">campaign</span><span class="p">,</span>
</span><span class='line'>               <span class="n">followed_type</span><span class="p">:</span> <span class="no">Campaign</span><span class="p">,</span>
</span><span class='line'>               <span class="n">user_id</span><span class="p">:</span>       <span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">first_or_create!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Next steps</h2>

<p>This slender little library has allowed us to scoop out a lot of functionality
from our <code>Action</code> class, making it significantly less god-like. New engineers
are able to arrive in the implementation file for the first time and comprehend
the core structure and functionality more rapidly, free from the distraction of
a bunch of secondary and tertiary side-effects.</p>

<p>If you&rsquo;d like to see what PubSubHub can do for your code base, it&rsquo;s only a <code>gem
install pubsubhub</code> away, and the <a href="https://github.com/causes/pubsubhub">source
code</a> is up on GitHub.</p>

<p>We&rsquo;re mindful that to the person with a hammer, everything looks like a nail, so
we&rsquo;re careful to ensure that we use the tool judiciously. In the context of a
Rails application, this means that we continue to make use of Rails&#8217; built-in
tools for managing side effects (things like <a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">Active Record life-cycle
callbacks</a>,
<a href="https://github.com/rails/rails-observers">observers</a>, and <a href="http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html">Active Support
Notifications</a>).</p>

<p>Additionally, our eyes are ever on the prize, asking the question, &ldquo;How can we
make this simpler?&rdquo; The Pub-Sub pattern is a tool for loosening the coupling
between parts of the system, but it does not entirely eliminate that coupling.
<a href="http://firstround.com/article/The-one-cost-engineers-and-product-managers-dont-consider">Complexity</a>
is the ultimate enemy, and the best way to manage side-effects is to simply
eliminate them in the first place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Showing Color Chips from Sass Variables]]></title>
    <link href="http://causes.github.io/blog/2013/06/06/showing-color-chips-from-sass-variables/"/>
    <updated>2013-06-06T07:00:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/06/06/showing-color-chips-from-sass-variables</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.causes.com">Causes</a> we like to make our code more maintainable by building reusable
components. Part of this strategy includes <a href="http://joelencioni.com/blog/2013/03/16/10-easy-ways-to-craft-more-readable-css/#two-or-more-use-a-for">assigning variable names to hex
colors using Sass</a>. This allows us to more easily reuse the same colors
everywhere, which improves consistency and makes it easier to re-color the
entire site when our design needs change.</p>

<p>To increase the visibility of these reusable components, we&rsquo;ve been building
out a collection of things that designers and engineers can reference, drop in
to projects, and iterate upon. The code sits next to the rendered version,
allowing people to easily see the implementation required to produce the
result. We call this collection the component gallery. It helps us do more with
less code, be more consistent, and iterate on global changes more easily and
effectively.</p>

<p>When we started fleshing out the color variables we wanted to use throughout
the site, it seemed natural to show these colors in the component gallery as
Pantone color chips. That way, designers could reference the colors that we are
using, we&rsquo;d have a single place to see that all of the colors look great next
to each other, and engineers could easily pluck variable names when
implementing designs to match the mocks.</p>

<p><img src="http://causes.github.io/assets/2013-06-06-pantone-chips.png"></p>

<!-- more -->


<p>The quick solution would have had us defining these colors in two places: once
in Sass, where we actually need to use them, and again in Ruby, where we want
to render them on a page. However, we sensed that this would be a pain to
maintain and the two different definitions would quickly fall out of sync.</p>

<p>To resolve these issues, we decided to move our color variables into their own
Sass partial, and use Sass to parse it to display the colors and their
variables. Since we like to use <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">functions like <code>darken()</code>, <code>lighten()</code>, and
<code>scale-color()</code></a>, we needed a solution that would actually execute the Sass
and use the result.</p>

<p>So we built a <a href="http://sass-lang.com/docs/yardoc/Sass/Tree/Visitors/Base.html">Sass Visitor</a> to evaluate variables and return pairs of names
and values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SassVariableEvaluator</span> <span class="o">&lt;</span> <span class="ss">Sass</span><span class="p">:</span><span class="ss">:Tree</span><span class="o">::</span><span class="ss">Visitors</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">visit_comment</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># prevents empty arrays from being in the returned array</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">visit_variable</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@environment</span> <span class="o">||=</span> <span class="ss">Sass</span><span class="p">:</span><span class="ss">:Environment</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@environment</span><span class="o">.</span><span class="n">set_local_var</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">expr</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">expr</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="vi">@environment</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have our <code>SassVariableEvaluator</code> visitor evaluate the variables in our
colors Sass partial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">color_variables</span>
</span><span class='line'>  <span class="n">engine</span> <span class="o">=</span> <span class="ss">Sass</span><span class="p">:</span><span class="ss">:Engine</span><span class="o">.</span><span class="n">for_file</span><span class="p">(</span><span class="s1">&#39;path/to/_colors.css.scss&#39;</span><span class="p">,</span> <span class="ss">syntax</span><span class="p">:</span> <span class="ss">:scss</span><span class="p">)</span>
</span><span class='line'>  <span class="no">SassVariableEvaluator</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="n">engine</span><span class="o">.</span><span class="n">to_tree</span><span class="p">)</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looping over those evaluated variables in our view generates the desired
markup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.clearfix</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">color_variables</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="nc">.pantone</span>
</span><span class='line'>      <span class="nc">.chip</span><span class="p">{</span> <span class="ss">style</span><span class="p">:</span> <span class="s2">&quot;background-color: </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span>;&quot; }
</span><span class='line'>      <span class="nt">%var</span> $<span class="si">#{</span><span class="nb">name</span><span class="si">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And style them nicely:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.pantone</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> box-shadow</span><span class="p">(</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span><span class="kt">px</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mf">.1</span><span class="p">))</span><span class="err">;</span>
</span><span class='line'>  <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#eee</span><span class="err">;</span>
</span><span class='line'>  <span class="na">float</span><span class="o">:</span> <span class="no">left</span><span class="err">;</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">11</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>  <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">em</span> <span class="mi">1</span><span class="kt">em</span> <span class="mi">0</span><span class="err">;</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">145</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">4n</span><span class="o">)</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">margin-right</span><span class="o">:</span> <span class="mi">0</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.chip</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="mh">#f00</span><span class="err">;</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">145</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">var</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="err">;</span>
</span><span class='line'>    <span class="na">font-style</span><span class="o">:</span> <span class="no">normal</span><span class="err">;</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="err">;</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">40</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mf">.75</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashing for the homeless]]></title>
    <link href="http://causes.github.io/blog/2013/06/04/hashing-for-the-homeless/"/>
    <updated>2013-06-04T13:57:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/06/04/hashing-for-the-homeless</id>
    <content type="html"><![CDATA[<p>The <cite><a href="http://en.wikipedia.org/wiki/John_Henry_%28folklore%29">Legend of John
Henry</a></cite> holds a steel
driver in contest with a steam-powered hammer, casting human excellence against
the progress of technology. Henry is a folk hero, but he dies betting against
technology. The point isn&rsquo;t that technology wins, though — we don&rsquo;t really
lose when technology wins.</p>

<p><img class="left" src="http://causes.github.io/assets/2013-06-04-john-henry.jpg" width="576" height="480" title="John Henry" ></p>

<iframe width="400" height="80" src="https://rd.io/i/QFdyK3YSgg/"
frameborder="0"></iframe>


<p>I&rsquo;m a technologist, but I&rsquo;m not in it for the tech — I&rsquo;m in it for making
things that make things better. Code is an unreasonably effective lever. It
sounds syrupy to say it, but I believe that computers are the best way for me
to make the world better. They work faster and more tirelessly than I could.
Bits travel the world freely, providing value to people I will never meet.
Things I wrote 10 years ago are still doing useful work, and they may continue
to do so after I am gone.</p>

<p>But there is a gap in society. Technologists are seen as wizards, in the
Matrix. Sometimes they are shown as heroic, nerdy, or villainous, but always
unassailably &ldquo;other&rdquo;. Normal people don&rsquo;t do this thing. Normal people feel
disenfranchised by technology. Some people feel it&rsquo;s useful but don&rsquo;t see
themselves ever producing with it. Very few people see technology for what it
really is: a tool for your use. People often suppose that tech sophistication
is a function of generation — that there was a web generation, a mobile
generation, that the next generation will get it better.</p>

<p>I disagree. Tech is changing more rapidly, not less, while our ability to
incorporate the new capabilities into our practices, norms, and laws is staying
constant. Each generation&rsquo;s youth get a head start on incorporating new things
because early in life everything is new — we have <a href="http://en.wikipedia.org/wiki/List_of_cognitive_biases">fewer bad patterns to
match</a>. But the faster
the strides of tech, the more quickly youth&rsquo;s head start is overtaken. But we
can choose not to be John Henry.</p>

<p>It would help everybody if we worked to close this gap, and casting the gap as
generational does real harm because it encourages waiting while we might act.</p>

<!-- more -->


<p>The computer and the internet — they carry meaning only in relation to our
connections, interactions, and outcomes. (Picasso quipped that computers are
useless because they can only give you answers.)</p>

<p>I&rsquo;ve <a href="http://anabasis.dunck.us/2012/11/25/should-everybody-be-a-programmer/">written
before</a>
that everyone should be a programmer; but if the computer is already a tool for
your use, please think back about how you got to this point. Why does it
matter to you, and what might have changed that for you? How can you make that
change for the people in your life? How can you apply this rare talent — of
being a wizard — to things that make material differences in people&rsquo;s lives?</p>

<p>I&rsquo;ve had some success appealing through automation. Tell your friends that if
they&rsquo;ve ever been bored while using a computer, they&rsquo;ve just found a reason to
learn programming. Most people who have used a computer have done some tedious
work on it — categorizing pictures, or filling in spreadsheets, for example.
Using that time to learn and to automate is <a href="http://xkcd.com/1205/">probably
worthwhile</a>.</p>

<p>But it turns out that hashing is also helpful to the homeless.</p>

<p>I recently met with <a href="https://twitter.com/LavaMae">Doniece Sandoval</a> of <a href="http://www.lavamae.org/">Lava
Mae</a>. She&rsquo;s working on providing mobile showers to
homeless people here in San Francisco. If you&rsquo;ve ever been to San Francisco,
you&rsquo;ve seen and smelled <a href="http://en.wikipedia.org/wiki/Homelessness_in_the_United_States">how many homeless people there
are</a>. These
people lack basic facilities, and there&rsquo;s a tremendous shortage of shelters and
showers. What few facilities there are are in a concentrated area of the city,
while the homeless spread throughout the city. Showering even once a month is
challenging. Mobile showers are an interesting approach to this problem,
because they are more scalable than fixed facilities, and because they can
bring the service to people who have precious few travel options and resources.</p>

<p>Doniece has a problem, though — she needs homeless people to know when her
service will be available — what time of day and where in the city. But not
only that — she has <a href="http://en.wikipedia.org/wiki/NIMBY">NIMBY</a> to address.
Nobody wants a huge line of homeless people loitering around their neighborhood
in hopes of a shower. Lines will form because her service will be overwhelmed
with demand.</p>

<p>She was exploring options to address these opposing concerns. Perhaps
unannounced popup locations for fixed amounts of time, too short for lines to
form? Pretty unfair and difficult logistically. Perhaps homeless people could
sign up to the service, receive a wristband, and be notified when their number
came up? Pretty expensive and hard to manage.</p>

<p>It occurred to me that she could use a <a href="http://en.wikipedia.org/wiki/Hash_function">hashing
algorithm</a>. Lava Mae could always
start service at the same time each day, and a location per day. People could
be assigned time slots during the day based on something they already have: a
name. The exact time slotting doesn&rsquo;t matter &ndash; it could be as simple as 10
minutes per letter, so that people whose names start with A come at 9AM, and
names starting with D come at 9:30, and so on. It&rsquo;s important that the hash be
simple and intuitive, but the direct mapping of letter to a specific time isn&rsquo;t
the only approach. Another could be that A through D collectively get the
first hour, or whatever other grouping/distribution is useful.</p>

<p><img class="left" src="http://causes.github.io/assets/2013-06-04-hash.png" width="240" height="184" title="Hash function" ></p>

<p>With this approach, everybody knows when they can get a shower (it stays the
same time for each person), and there&rsquo;s no point coming earlier or staying
later. Checking whether people are allowed at that time is simple — any form
of ID would do — and it would be fair (assuming time slots were adjusted to
per-letter population). If there are too many people for a given time slot, at
least each person in that slot got a fair chance (everybody who came for a time
slot could get picked in a small lottery). NIMBY and wasted time are both
minimized.</p>

<p>To a programmer, this idea is quite simple — we use hashing all the time,
mapping arbitrary values into a known space. We think abstractly about solving
problems all the time. But it solves a real-world problem in a practical way.
Any time a service needs to be fairly distributed from a thing &ldquo;they&rdquo; have to a
thing we control, hashing probably will help.</p>

<p>Activism can be, in part, an engineering problem. And we can all be engineers.
Maybe you should be an activist. Or maybe you should help an activist become
an engineer. <a href="http://www.causes.com/jobs?ctm=engblog#Engineering">Causes is
hiring</a> if you&rsquo;d like to
get started here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overcommit: The opinionated Git hook manager]]></title>
    <link href="http://causes.github.io/blog/2013/05/30/overcommit-the-opinionated-git-hook-manager/"/>
    <updated>2013-05-30T14:02:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/05/30/overcommit-the-opinionated-git-hook-manager</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.causes.com">Causes</a>, we care deeply about code quality.  We
promote thorough, offline code review through
<a href="https://code.google.com/p/gerrit/">Gerrit</a> and take pride in each commit we
make. Due to the sheer volume of code review and the number of engineers on our
team, it&rsquo;s important that by the time other engineers review our code we have an
established baseline of quality.</p>

<p>There are a few important ingredients to making a good commit:</p>

<ul>
<li>Correctness: The code does what you expect it to do</li>
<li>Commit message: Tim Pope provides an excellent summary of <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">what makes a good
commit message</a></li>
<li>Style: The code matches our team&rsquo;s coding styles</li>
<li>Test coverage: relevant tests have been run, and any new features have spec
coverage</li>
</ul>


<p>Enter <a href="https://github.com/causes/overcommit">overcommit</a>. This evolved from a
single file linter into a full-fledged, extensible hook architecture.  Available
as a Ruby gem:</p>

<pre><code>gem install overcommit
</code></pre>

<p>What does it do? In short, it automates away all the tedium before a commit
reaches code review. It ships with a set of opinionated lints that ensure a
level of consistency and quality in our commits.</p>

<h2>In Action</h2>

<p>Here&rsquo;s an example of overcommit saving me from committing janky code:</p>

<pre><code>❯❯❯ echo "eval('alert(\"hello world\")');" > eval.js
❯❯❯ git add eval.js
❯❯❯ git commit
Running pre_commit checks
  Checking causes_email...........<span class="success">OK</span>
  Checking test_history...........<span class="warning">No relevant tests for this change...write some?</span>
  Checking restricted_paths.......<span class="success">OK</span>
  Checking js_console_log.........<span class="success">OK</span>
  Checking js_syntax..............<span class="error">FAILED</span>
    eval.js: line 1, col 1, eval can be harmful.

    1 error
  Checking author_name............<span class="success">OK</span>
  Checking whitespace.............<span class="success">OK</span>

<span class="error">!!! One or more pre_commit checks failed</span>
</code></pre>




<!-- more -->


<h2>Installation</h2>

<p>After installing the gem, a new binary, <code>overcommit</code>, will be available. You can
use this binary to install git hooks into an existing repository like so:</p>

<pre><code>overcommit my-project
</code></pre>

<p>Where <code>my-project</code> is the directory of a git repository. In addition to
installing hooks into <code>my-project/.git/hooks</code>, this will also write an
<code>overcommit.yml</code> file containing repository-specific configuration. You can use
this, for example, to always skip a certain type of lint. See more options by
running <code>overcommit --help</code>.</p>

<h2>Built-in functionality</h2>

<h4>pre-commit hooks</h4>

<ul>
<li><p><code>coffee_lint</code> uses <a href="http://www.coffeelint.org/">CoffeeLint</a> to keep your
CoffeeScript clean and consistent.</p></li>
<li><p><code>haml_syntax</code> verifies that any <a href="http://haml.info/">Haml</a> file to be committed
is syntactially valid.</p></li>
<li><p><code>js_syntax</code> uses <a href="http://www.jshint.com/">jshint</a> to ensure best JavaScript
practices are followed.</p></li>
<li><p><code>python_flake8</code> uses <a href="https://pypi.python.org/pypi/flake8">flake8</a> to lint
Python code.</p></li>
<li><p><code>ruby_syntax</code> makes sure that any Ruby files to be committed are syntactically
valid by  running <code>ruby -c #{staged_file}</code>.</p></li>
<li><p><code>scss_lint</code> integrates with our <a href="github.com/causes/scss-lint">scss-lint</a> gem
to ensure our stylesheets are the best they can be. This includes alphabetizing
properties, removing unnecessary units, and so much more. <a href="https://github.com/causes/scss-lint#what-gets-linted">Read
more</a> about what gets
linted.</p></li>
<li><p><code>whitespace</code> verifies that no hard tabs are used and that no trailing
whitespace is included. The devil is in the details.</p></li>
</ul>


<p>There are more hooks included, including Causes-specific ones (such as making
sure your @causes.com email address is used), but these are excluded by
default. See the rest of the lints
<a href="https://github.com/causes/overcommit/tree/master/lib/overcommit/plugins/pre_commit">here</a>.</p>

<h4>commit-msg hooks</h4>

<ul>
<li><p><code>russian_novel</code> is just for fun, to reward developers for writing exemplary
(long) commit messages.</p></li>
<li><p><code>text_width</code> ensures that the body of the commit is hard-wrapped to 72
characters, and that the subject is &lt;= 60 characters.</p></li>
<li><p><code>trailing_period</code> warns the author if their commit message subject ends with a period.</p></li>
</ul>


<h2>Extensibility</h2>

<p>In addition to the gem-provided, global hooks, <code>overcommit</code> also allows for
repository-specific hooks to be added. An example from the documentation is our
<a href="http://www.opscode.com/chef/">Chef</a> repository-specific hook to run
<a href="http://acrmp.github.io/foodcritic/">Foodcritic</a> against any cookbooks being
committed.</p>

<p>This file lives in kitchen.git/.githooks/pre_commit/food_critic.rb</p>

<figure class='code'><figcaption><span>food_critic.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Overcommit::GitHook</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">FoodCritic</span> <span class="o">&lt;</span> <span class="no">HookSpecificCheck</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">HookRegistry</span>
</span><span class='line'>    <span class="no">COOKBOOKS</span> <span class="o">=</span> <span class="s1">&#39;cookbooks&#39;</span>
</span><span class='line'>    <span class="vc">@@options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:tags</span> <span class="o">=&gt;</span> <span class="sx">%w[~readme ~fc001]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run_check</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="nb">require</span> <span class="s1">&#39;foodcritic&#39;</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'>        <span class="k">return</span> <span class="ss">:stop</span><span class="p">,</span> <span class="s1">&#39;run `bundle install` to install the foodcritic gem&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">changed_cookbooks</span> <span class="o">=</span> <span class="n">modified_files</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">start_with?</span> <span class="no">COOKBOOKS</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">linter</span> <span class="o">=</span> <span class="o">::</span><span class="ss">FoodCritic</span><span class="p">:</span><span class="ss">:Linter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">review</span> <span class="o">=</span> <span class="n">linter</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">changed_cookbooks</span><span class="p">,</span> <span class="vc">@@options</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">review</span><span class="o">.</span><span class="n">warnings</span><span class="o">.</span><span class="n">any?</span> <span class="p">?</span> <span class="ss">:bad</span> <span class="p">:</span> <span class="ss">:good</span><span class="p">),</span> <span class="n">review</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Skipping checks</h2>

<p>There are, of course, times when you&rsquo;re going to need to break the rules. You
can skip any lint by passing the underscore-ized name into the <code>SKIP_CHECKS</code>
environment variable. This can either be a single lint, or a
comma/colon-separated list of lints to skip:</p>

<pre><code>SKIP_CHECKS=js_syntax:restricted_paths git commit
</code></pre>

<p>There&rsquo;s also the special value of <code>all</code>, which will skip all of the non-required
lints.</p>

<h2>The future</h2>

<p>Until recently, overcommit has only been useful inside Causes due to the
specific lints we run and the lack of easy installation. We hope others find it
useful, and have released it under the MIT license. Pull requests are welcome.
<a href="https://github.com/causes/overcommit">View the source on GitHub</a>.</p>

<p>Happy hacking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Asynchronously Loaded JavaScript Objects]]></title>
    <link href="http://causes.github.io/blog/2013/05/28/working-with-asynchronously-loaded-javascript-objects/"/>
    <updated>2013-05-28T14:00:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/05/28/working-with-asynchronously-loaded-javascript-objects</id>
    <content type="html"><![CDATA[<p>Telling browsers to load large JavaScripts asynchronously can significantly
improve performance. This prevents the browser from blocking the rendering of
the page, allowing it to be viewed more quickly. However, if you are loading
dependent files asynchronously, such as a third-party service&rsquo;s API, making the
scripts work together is not automatic.</p>

<p>At <a href="http://www.causes.com">Causes</a> we use Facebook&rsquo;s large (nearly 60 <abbr
title="Kibibytes">KiB</abbr> gzipped) JavaScript API on our pages. Although
<a href="https://developers.facebook.com/docs/reference/javascript/#loading">they recommend loading it
asynchronously</a>,
we were already putting our JavaScript at the bottom of the page and weren&rsquo;t
convinced that async would give us much additional benefit. However, after some
non-scientific performance tests it appeared that switching to asynchronously
loading the Facebook API could reduce the time to <code>DOMContentLoaded</code> by nearly
a full second on our pages.</p>

<!-- more -->


<p>After the Facebook API has been loaded asynchronously, it executes
<code>window.fbAsyncInit</code>, which is where  <a href="https://developers.facebook.com/docs/javascript/gettingstarted/#loading">they
suggest</a>
placing code that depends on the <code>FB</code>.</p>

<p>The trouble is, we wanted our JavaScript that interacts with the Facebook API
to continue to work even though it is dispersed throughout our scripts, and it
may execute before the API was available.</p>

<p>The <a href="http://stackoverflow.com/questions/3548493/how-to-detect-when-facebooks-fb-init-is-complete">answers on
StackOverflow</a>
may work, but they feel inelegant. For instance, <a href="http://stackoverflow.com/a/3549043/18986">one
answer</a> addresses this problem by
setting a flag to true in the <code>fbAsyncInit</code> callback, and creates a
<code>fbEnsureInit</code> method that uses a recursive timeout to poll the flag.</p>

<p>We decided to take a different approach. Thankfully, the Facebook API sets up a
single object, <code>FB</code>, for developers to interact with.</p>

<p>So we developed a class, <code>MethodProxy</code>, to act as a proxy between the rest of
our code and the <code>FB</code> object. It accepts an object to forward calls onto, and
it masquerades as an Array by implementing a <code>push</code> method. The <code>push</code> method
accepts a single argument of a array whose first position is always a string of
the method name on the <code>FB</code> object to be executed, followed by as many
arguments to be given to that method.</p>

<figure class='code'><figcaption><span>MethodProxy.push()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// payload : [&#39;methodName&#39;, arguments*]</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">push</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">forward</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">methodName</span> <span class="o">=</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">shift</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">object</span>     <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">method</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">methodName</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// dig into the object as many levels as needed (e.g. `FB.XFBML.parse`)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">object</span> <span class="o">=</span> <span class="nx">object</span><span class="p">[</span><span class="nx">method</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">method</span> <span class="o">=</span> <span class="nx">methodName</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">object</span><span class="p">[</span><span class="nx">method</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows us to initialize a native Array when the page loads to collect
calls to Facebook&rsquo;s API. Then, in the <code>fbAsyncInit</code> callback, we Indiana Jones
style swap out the native array with an instantiation of our <code>MethodProxy</code>
object, which then consumes the queued events by executing them on the <code>FB</code>
object. The end result is a consistent API for our code to use regardless of
the state of Facebook&rsquo;s asynchronously loaded API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MyFB</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MyFB</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyFB</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;ui&#39;</span><span class="p">,</span> <span class="p">...]);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">fbAsyncInit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">FB</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">MyFB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MethodProxy</span><span class="p">(</span><span class="nx">FB</span><span class="p">,</span> <span class="nx">MyFB</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyFB</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;FBML.parse&#39;</span><span class="p">,</span> <span class="p">...]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MethodProxy</code> is general enough to be used for other similar cases so we&rsquo;ve
released it as <a href="https://github.com/causes/method-proxy-js">method-proxy-js, an open source
project</a> under the MIT license. Pull
requests welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Easy Ways to Craft More Readable CSS]]></title>
    <link href="http://causes.github.io/blog/2013/03/16/10-easy-ways-to-craft-more-readable-css/"/>
    <updated>2013-03-16T15:45:00-07:00</updated>
    <id>http://causes.github.io/blog/2013/03/16/10-easy-ways-to-craft-more-readable-css</id>
    <content type="html"><![CDATA[<blockquote><p>Always code as if the [person] who ends up maintaining your code will be a
violent psychopath who knows where you live. Code for readability.
—<cite><a href="https://groups.google.com/d/msg/comp.lang.c++/rYCO5yn4lXw/oITtSkZOtoUJ">John Woods</a></cite></p></blockquote>

<p>Diving into a large, old piece of CSS typically is neither easy nor
pleasurable. I find that <strong>the biggest challenges in working with old CSS often
lie in understanding the purpose and interactions of the styles</strong>.</p>

<p>When styling new elements, we have the entire context of the implementation
immediately available, and it is easy to write styles that make sense to us at
that very moment. However, in a few weeks or to a fresh pair of eyes, what made
a lot of sense at first might end up being a lot more cryptic. Without a clear
understanding of the purpose and interactions of the styles, modifying
stylesheets can be dangerous, tedious, and cumbersome. Therefore, it is
important to communicate enough context so that future developers will be able
to grok the code easily and make informed decisions.</p>

<p>At <a href="http://www.causes.com/">Causes</a>, we have adopted the following practices
which we believe have improved the maintainability of our stylesheets, reduced
bugs, and increased developer velocity. When you have finished reading this, I
hope that you will have a few more tools to help move your codebase toward
greater maintainability.</p>

<p><a class="more-link" href="http://joelencioni.com/blog/2013/03/16/10-easy-ways-to-craft-more-readable-css/">Read on</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Even Faster: Loading Half a Billion Rows in MySQL Revisited]]></title>
    <link href="http://causes.github.io/blog/2012/08/21/even-faster-loading-half-a-billion-rows-in-mysql/"/>
    <updated>2012-08-21T00:00:00-07:00</updated>
    <id>http://causes.github.io/blog/2012/08/21/even-faster-loading-half-a-billion-rows-in-mysql</id>
    <content type="html"><![CDATA[<p>A few months ago, I wrote a post on loading 500 million rows into a single
innoDB table from flatfiles. This was in the effort to un-‘optimize’ a premature
optimization in our codebase: user action credits were being stored in monthly
sharded tables to keep the tables small and performant. As our use of the code
changed, we found more and more that we had to do a query for each month to see
if a user had taken an action. We implemented some performance optimizations
(mainly memcaching values from prior months as they are immutable), but it was
still overly complicated and prone to bugs. Since we had another table that was
900m rows, it seemed reasonable to collapse these shards into one 500m row
table.</p>

<p>Since writing the last post, I’ve learned that there’s a much quicker way to
combine those tables — as long as you already have the data in MySQL. MySQL
allows for selecting from one table into another via the <code>INSERT INTO ..
SELECT</code> statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dest_table</span> <span class="p">(</span><span class="k">values</span><span class="p">)</span> <span class="k">SELECT</span> <span class="k">values</span> <span class="k">FROM</span> <span class="n">source_table</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>which might look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">credits_new</span> <span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">activity_id</span><span class="p">,</span> <span class="n">created_at</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">activity_id</span><span class="p">,</span> <span class="n">created_at</span> <span class="k">FROM</span> <span class="n">credits</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shouldn’t be surprising; an ALTER TABLE on an innoDB table creates a new
table with the new schema and copies the rows from the old table over to the
new table.</p>

<!-- more -->


<p>With large tables though, you still have to do a little leg work to get this to
work properly. First, the database machine needs enough space to hold both the
old table(s) and new tables on disk, until you’re able to delete the old table.
As you insert into the table, inserts will get slower and slower. This also
makes sense; as the table grows the indexes grow, and working with them gets
slower. You’ll want to break the loading into many chunks so that each
transaction completes in a reasonable amount of time. In practice, I’ve found
that the optimum chunk size gets smaller as the size of the table grows.
Starting at 100k rows is not unreasonable, but don’t be surprised if near the
end you need to drop it closer to 10k or 5k to keep the transaction to under 30
seconds. If you don’t keep the transaction time reasonable, the whole operation
could outright fail eventually with something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">ERROR</span> <span class="mi">1197</span> <span class="p">(</span><span class="n">HY000</span><span class="p">):</span> <span class="n">Multi</span><span class="o">-</span><span class="k">statement</span> <span class="n">transaction</span> <span class="n">required</span> <span class="k">more</span> <span class="k">than</span>
</span><span class='line'><span class="err">‘</span><span class="n">max_binlog_cache_size</span><span class="err">’</span> <span class="n">bytes</span> <span class="k">of</span> <span class="k">storage</span><span class="p">;</span> <span class="n">increase</span> <span class="n">this</span> <span class="n">mysqld</span> <span class="k">variable</span> <span class="k">and</span>
</span><span class='line'><span class="n">try</span> <span class="n">again</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will certainly slow down (I wish I had kept a graph of timestamp vs rows
inserted, but it’s certainly de-motivating). You might also want a delay as to
not overwhelm the slave and cause replication to lag too far behind. I used
external files to store the values of both variables that were read from disk at
each iteration, so that I could change the values without interrupting the
script. Using the same file trick, each iteration wrote out the table name and
id of the last row read (in case something broke and I wanted to resume).</p>

<p>This is the script that was used to perform the migration. I left it running in
a tmux session and also used `watch -n 10 LAST_WRITTEN’ to monitor the progress.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">file_variable</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">TARGET_TABLE</span> <span class="o">=</span> <span class="s1">&#39;action_credits&#39;</span>
</span><span class='line'><span class="no">SCHEMA</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">CREATE TABLE IF NOT EXISTS `action_credits` (</span>
</span><span class='line'><span class="sh">.. omitted for brevity ..</span>
</span><span class='line'><span class="sh"> ) ENGINE=InnoDB  DEFAULT CHARSET=utf8;</span>
</span><span class='line'><span class="no">SQL</span>
</span><span class='line'><span class="n">insert_columns</span> <span class="o">=</span> <span class="p">(</span><span class="n">has_utm_campaign</span> <span class="p">?</span> <span class="n">columns</span> <span class="p">:</span> <span class="n">columns</span> <span class="o">+</span> <span class="o">[</span><span class="s1">&#39;utm_campaign&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="s1">&#39;,&#39;</span>
</span><span class='line'><span class="n">select_columns</span> <span class="o">=</span> <span class="p">(</span><span class="n">has_utm_campaign</span> <span class="p">?</span> <span class="n">columns</span> <span class="p">:</span> <span class="n">columns</span> <span class="o">+</span> <span class="o">[</span><span class="s1">&#39;NULL&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="s1">&#39;,&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">chunk_size</span> <span class="o">=</span> <span class="n">file_variable</span><span class="p">(</span><span class="s1">&#39;CHUNK_SIZE&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">rows</span> <span class="o">/</span> <span class="n">chunk_size</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">lower</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">chunk_size</span>
</span><span class='line'>  <span class="n">upper</span> <span class="o">=</span> <span class="n">lower</span> <span class="o">+</span> <span class="n">chunk_size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">query</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span><span class="o">.</span><span class="n">squish</span>
</span><span class='line'><span class="sh">    INSERT INTO \#{TARGET_TABLE} (\#{insert_columns})</span>
</span><span class='line'><span class="sh">    SELECT \#{select_columns} FROM \#{table}</span>
</span><span class='line'><span class="sh">    WHERE id BETWEEN \#{lower} AND \#{upper}</span>
</span><span class='line'><span class="no">  SQL</span>
</span><span class='line'>  <span class="n">query_start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="n">q</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Finished at </span><span class="se">\#</span><span class="s2">{Time.now} in </span><span class="se">\#</span><span class="s2">{Time.now - query_start} seconds&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;LAST_WRITTEN&#39;</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="o">[</span><span class="n">table</span><span class="p">,</span> <span class="n">upper</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">))}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay</span> <span class="o">=</span> <span class="n">file_variable</span><span class="p">(</span><span class="s1">&#39;DELAY&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Waiting </span><span class="se">\#</span><span class="s2">{delay} seconds&quot;</span> <span class="k">if</span> <span class="n">delay</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="n">delay</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Finished in </span><span class="se">\#</span><span class="s2">{((Time.now - start) / 3600).to_i} hours&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There’s a slight concern that dropping the table while the filesystem deletes
the ibd files (where the innoDB data lives) will lock the table for a long
period of time (see <a href="http://bugs.mysql.com/bug.php?id=41158">http://bugs.mysql.com/bug.php?id=41158</a>), but it wasn’t a
problem when I tried it on a 116 GB table. If you prefer to be paranoid (like I
was), there’s a trick you can use to unlink the table data asynchronously:
create a hard link to the table’s .ibd file before you DROP the table; the DROP
will only unlink one of the two hard links to the file. Afterward you can `rm
the_hardlink’ and your filesystem will remove the .ibd data. Using this method
in practice took me 5 seconds to DROP and 13 seconds to rm the hardlink.</p>

<p>If all you need to do is a simple alter table (and not something complicated
like combining sharded tables), I’d recommend using the pt-online-schema-change
tool provided by Percona. We’ll look at the details of that tool in a future
post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loading half a billion rows into MySQL]]></title>
    <link href="http://causes.github.io/blog/2012/06/05/loading-half-a-billion-rows-into-mysql/"/>
    <updated>2012-06-05T00:00:00-07:00</updated>
    <id>http://causes.github.io/blog/2012/06/05/loading-half-a-billion-rows-into-mysql</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>We have a legacy system in our production environment that keeps track of when
a user takes an action on Causes.com (joins a Cause, recruits a friend, etc).
I say legacy, but I really mean a prematurely-optimized system that I&rsquo;d like
to make less smart. This 500m record database is split across monthly sharded
tables. Seems like a great solution to scaling (and it is)&mdash;except that
we don&rsquo;t need it. And based on our usage pattern (e.g. to count a user&rsquo;s total
number of actions, we need to do query N tables), this leads to pretty severe
performance degradation issues. Even with memcache layer sitting in front of
old month tables, new features keep discovering new N-query performance
problems.  Noticing that we have another database happily chugging along with
900 million records, I decided to migrate the existing system into a single
table setup. The goals were:</p>

<ul>
<li>Reduce complexity. Querying one table is simpler than N tables.</li>
<li>Push as much complexity as possible to the database. The wrappers around the
month-sharding logic in Rails are slow and buggy.</li>
<li>Increase performance. Also related to one table query being simpler than N.</li>
</ul>


<h2>Alternative Proposed Solutions</h2>

<p><em>MySQL Partitioning:</em>
This was the most similar to our existing set up, since MySQL internally
stores the data into different tables. We decided against it because it seemed
likely that it wouldn&rsquo;t be much faster than our current solution (although
MySQL can internally do some optimizations to make sure you only look at
tables that could possibly have data you want). And it&rsquo;s still the same
complexity we were looking to reduce (and would further be the only database
set up in our system using partitioning).</p>

<p><em>Redis:</em>
Not really proposed as an alternative because the full dataset won&rsquo;t fit
into memory, but something we&rsquo;re considering loading a subset of the data into
to answer queries that we make a lot that MySQL isn&rsquo;t particularly good at
(e.g.  &lsquo;which of my friends have taken an action&rsquo; is quick using Redis&rsquo;s built
in <code>SET UNION</code> function). The new MySQL table might be performant enough that it
doesn&rsquo;t make sense to build a fast Redis version, so we&rsquo;re avoiding this as
possible premature optimization, especially with a technology we&rsquo;re not as
familiar with.</p>

<!-- more -->


<h2>Dumping the old data</h2>

<p>MySQL provides the <code>mysqldump</code> utility to allow quick dumping to disk:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysqldump -T /var/lib/mysql/database_data database_name
</span></code></pre></td></tr></table></div></figure>


<p>This will produce a TSV file for each table in the database, and this is the
format that <code>LOAD INFILE</code> will be able to quickly load later on.</p>

<h2>Installing Percona 5.5</h2>

<p>We&rsquo;ll be building the new system with the latest-and-greatest in Percona
databases on CentOS 6.2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rpm -Uhv http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm
</span><span class='line'>yum install Percona-Server-shared-compat Percona-Server-client-55 Percona-Server-server-55 -y
</span></code></pre></td></tr></table></div></figure>


<p>[ open bug with the compat package:
<a href="https://bugs.launchpad.net/percona-server/+bug/908620">https://bugs.launchpad.net/percona-server/+bug/908620</a> ]</p>

<h2>Specify a directory for the InnoDB data</h2>

<p>This isn&rsquo;t exactly a performance tip, but I had to do some digging to get MySQL
to store data on a different partition. The first step is to make use your
my.cnf contains a</p>

<pre><code>datadir = /path/to/data
</code></pre>

<p>directive. Make sure /path/to/data is owned by mysql:mysql</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chown -R mysql.mysql /path/to/data
</span></code></pre></td></tr></table></div></figure>


<p>and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql_install_db --user<span class="o">=</span>mysql --datadir<span class="o">=</span>/path/to/data
</span></code></pre></td></tr></table></div></figure>


<p>This will set up the directory structures that InnoDB uses to store data. This
is also useful if you&rsquo;re aborting a failed data load and want to wipe the slate
clean (if you don&rsquo;t specify a directory, /var/lib/mysql is used by default).
Just <code>rm -rf *</code> the directory and run the <code>mysql_install_db</code> command.</p>

<p>[* <a href="http://dev.mysql.com/doc/refman/5.5/en/mysql-install-db.html">http://dev.mysql.com/doc/refman/5.5/en/mysql-install-db.html</a> ]</p>

<h2>SQL Commands to Speed up the LOAD DATA</h2>

<p>You can tell MySQL to not enforce foreign key and uniqueness constraints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="n">FOREIGN_KEY_CHECKS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">SET</span> <span class="n">UNIQUE_CHECKS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and drop the transaction isolation guarantee to UNCOMMITTED:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="k">SESSION</span> <span class="n">tx_isolation</span><span class="o">=</span><span class="s1">&#39;READ-UNCOMMITTED&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and turn off the binlog with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="n">sql_log_bin</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when you&rsquo;re done, don&rsquo;t forget to turn it back on with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="n">UNIQUE_CHECKS</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">SET</span> <span class="n">FOREIGN_KEY_CHECKS</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">SET</span> <span class="k">SESSION</span> <span class="n">tx_isolation</span><span class="o">=</span><span class="s1">&#39;READ-REPEATABLE&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noting that a lot of resources will tell you to to use the &ldquo;DISABLE
KEYS&rdquo; directive and have the indices all built once all the data has been loaded
into the table. Unfortunately, InnoDB does not support this. I tried it, and
while it took only a few hours to load 500m rows, the data was unusable without
any indices. You could drop the indices completely and add them later, but with
a table size this big I didn&rsquo;t think it would help much.</p>

<p>Another red herring was turning off autocommit and committing after each <code>LOAD
DATA</code> statement. This was effectively the same thing as autocommitting, and
manually commiting led to <code>LOAD DATA</code> slowdowns a quarter of the way in.
[<a href="http://dev.mysql.com/doc/refman/5.1/en/alter-table.html">http://dev.mysql.com/doc/refman/5.1/en/alter-table.html</a>]</p>

<pre><code>- [&lt;http://dev.mysql.com/doc/refman/5.1/en/alter-table.html&gt;, search for
  'DISABLE KEYS']
- [ &lt;http://www.mysqlperformanceblog.com/2007/11/01/innodb-performance-optimization-basics/&gt; ]
</code></pre>

<h2>Performance adjustments made to my.cnf</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">-</span><span class="n">flush_log</span><span class="o">=</span><span class="s1">&#39;http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit&#39;</span>
</span><span class='line'><span class="c1">-- #{ link_to flush_log, flush_log }</span>
</span><span class='line'><span class="c1">-- this loosens the frequency with which the data is flushed to disk</span>
</span><span class='line'><span class="c1">-- it&#39;s possible to lose a second or two of data this way in the event of a</span>
</span><span class='line'><span class="c1">-- system crash, but this is in a very controlled circumstance</span>
</span><span class='line'><span class="n">innodb_flush_log_at_trx_commit</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="c1">-- rule of thumb is 75% - 80% of total system memory</span>
</span><span class='line'><span class="n">innodb_buffer_pool_size</span><span class="o">=</span><span class="mi">16</span><span class="n">GB</span>
</span><span class='line'><span class="c1">-- don&#39;t let the OS cache what InnoDB is caching anyway</span>
</span><span class='line'><span class="c1">-- http://www.mysqlperformanceblog.com/2007/11/01/innodb-performance-optimization-basics/</span>
</span><span class='line'><span class="n">innodb_flush_method</span><span class="o">=</span><span class="n">O_DIRECT</span>
</span><span class='line'><span class="c1">-- don&#39;t double write the data</span>
</span><span class='line'><span class="c1">-- http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_doublewrite</span>
</span><span class='line'><span class="n">innodb_doublewrite</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use LOAD DATA INFILE</h2>

<p>This is the most optimized path toward bulk loading structured data into MySQL.
<a href="http://dev.mysql.com/doc/refman/5.5/en/insert-speed.html">8.2.2.1. Speed of <code>INSERT</code> Statements,</a>
predicts a ~20x speedup over a bulk <code>INSERT</code> (i.e. an <code>INSERT</code> with thousands of
rows in a single statement). See also
<a href="http://dev.mysql.com/doc/refman/5.5/en/optimizing-innodb-bulk-data-loading.html">8.5.4. Bulk Data Loading for InnoDB Tables,</a>
for a few more tips.</p>

<p>Not only is it faster, but in my experience with this migration, the INSERT
method will slow down faster than it can load data and effectively never finish
(last estimate I made was 60 days, but it was still slowing down).</p>

<p>INFILE must be in the directory that InnoDB is storing that database
information. If MySQL is in /var/lib/mysql, then mydatabase would be in
/var/lib/mysql/mydatabase. If you don&rsquo;t have access to that directory on the
server, you can use <code>LOAD DATA LOCAL INFILE</code>. In my testing, putting the file in
the proper place and using <code>LOAD DATA INFILE</code> increased load performance by
about 20%.</p>

<p><a href="http://dev.mysql.com/doc/refman/5.5/en/load-data.html">http://dev.mysql.com/doc/refman/5.5/en/load-data.html</a></p>

<h2>Perform your data transformation directly in MySQL</h2>

<p>Our old actioncredit system was unique on (MONTH(created_at), id), but the new
system is going to generate new autoincrementing IDs for each records as it&rsquo;s
loaded in chronological order. The problem was that my 50 GB of TSV data doesn&rsquo;t
match up to the new schema. Some scripts I had that would use Ruby to transform
the old row into the new row was laughably slow. I did some digging and found
out that you can tell MySQL to (quickly) throw away the data you don&rsquo;t want in
the load statement itself, using parameter binding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">LOAD</span> <span class="k">DATA</span> <span class="n">INFILE</span> <span class="s1">&#39;data.csv&#39;</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">mytable</span>
</span><span class='line'><span class="n">FIELDS</span> <span class="n">TERMINATED</span> <span class="k">by</span> <span class="s1">&#39;\t&#39;</span> <span class="n">ENCLOSED</span> <span class="k">BY</span> <span class="s1">&#39;\&quot;&#39;</span>
</span><span class='line'><span class="p">(</span><span class="o">@</span><span class="n">throwaway</span><span class="p">),</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">created_at</span>
</span></code></pre></td></tr></table></div></figure>


<p>This statement is telling MySQL which fields are represented in data.csv.
@throwaway is a binding parameter; and in this case we want to discard it so
we&rsquo;re not going to bind it. If we wanted to insert a prefix, we could execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">LOAD</span> <span class="k">DATA</span> <span class="n">INFILE</span> <span class="s1">&#39;data.csv&#39;</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">mytable</span>
</span><span class='line'><span class="n">FIELDS</span> <span class="n">TERMINATED</span> <span class="k">by</span> <span class="s1">&#39;\t&#39;</span> <span class="n">ENCLOSED</span> <span class="k">BY</span> <span class="s1">&#39;\&quot;&#39;</span>
</span><span class='line'><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="o">@</span><span class="n">action</span><span class="p">,</span> <span class="n">created_at</span>
</span><span class='line'><span class="k">SET</span> <span class="n">action</span><span class="o">=</span><span class="n">CONCAT</span><span class="p">(</span><span class="s1">&#39;prefix_&#39;</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and every loaded row&rsquo;s `action&#8217; column will begin with the string &lsquo;prefix&rsquo;.</p>

<h2>Checking progress without disrupting the import</h2>

<p>If you&rsquo;re loading large data files and want to check the progress, you
definitely don&rsquo;t want to use `SELECT COUNT(*) FROM table&#8217;. This query will
degrade as the size of the table grows and slowdown the LOAD process. Instead
you can query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">table_rows</span> <span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">WHERE</span> <span class="k">table_name</span> <span class="o">=</span> <span class="s1">&#39;table&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">table_rows</span> <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------+</span>
</span><span class='line'><span class="o">|</span>   <span class="mi">27273886</span> <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">23</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to watch/log the progress over time, you can craft a quick shell
command to poll the number of rows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">while</span> :; <span class="k">do </span>mysql -hlocalhost databasename -e <span class="s2">&quot;SELECT table_rows FROM information_schema.tables WHERE table_name = &#39;table&#39; \G ; &quot;</span> | grep rows | cut -d<span class="s1">&#39;:&#39;</span> -f2 | xargs <span class="nb">echo</span> <span class="sb">`</span>date +<span class="s2">&quot;%F %R&quot;</span><span class="sb">`</span> , | tee load.log <span class="o">&amp;&amp;</span> sleep 30; <span class="k">done</span>
</span><span class='line'>2012-05-29 18:16 , 32267244
</span><span class='line'>2012-05-29 18:16 , 32328002
</span><span class='line'>2012-05-29 18:17 , 32404189
</span><span class='line'>2012-05-29 18:17 , 32473936
</span><span class='line'>2012-05-29 18:18 , 32543698
</span><span class='line'>2012-05-29 18:18 , 32616939
</span><span class='line'>2012-05-29 18:19 , 32693198
</span></code></pre></td></tr></table></div></figure>


<p>The <code>tee</code> will echo to STDOUT as well as to <code>file.log</code>, the <code>\G</code> formats the
columns in the result set as rows, and the sleep gives it a pause between
loading.</p>

<h2>LOAD DATA chunking script</h2>

<p>I quickly discovered that throwing a 50m row TSV file at LOAD DATA was a good
way to have performance degrade to the point of not finishing. I settled on
using `split&#8217; to chunk data into one million rows per file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>month_table in action*.txt; <span class="k">do</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$(date) splitting $month_table...&quot;</span>
</span><span class='line'>split -l 1000000 <span class="nv">$month_table</span> curmonth_
</span><span class='line'><span class="k">for </span>segment in curmonth_*; <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;On segment $segment&quot;</span>
</span><span class='line'>  <span class="nb">time </span>mysql -hlocalhost action_credit_silo <span class="s">&lt;&lt;-SQL</span>
</span><span class='line'><span class="s">    SET FOREIGN_KEY_CHECKS = 0;</span>
</span><span class='line'><span class="s">    SET UNIQUE_CHECKS = 0;</span>
</span><span class='line'><span class="s">    SET SESSION tx_isolation=&#39;READ-UNCOMMITTED&#39;;</span>
</span><span class='line'><span class="s">    SET sql_log_bin = 0;</span>
</span><span class='line'><span class="s">    LOAD DATA INFILE &#39;$segment&#39; INTO TABLE actioncredits</span>
</span><span class='line'><span class="s">    FIELDS TERMINATED by &#39;\t&#39; ENCLOSED BY &#39;\&quot;&#39;</span>
</span><span class='line'><span class="s">    (@throwawayId, action, user_id, target_user_id, cause_id, item_type, item_id, activity_id, created_at, utm_campaign) ;</span>
</span><span class='line'><span class="s">  SQL</span>
</span><span class='line'>    rm <span class="nv">$segment</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span>mv <span class="nv">$month_table</span> <span class="nv">$month_table</span>.done
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrap-up</h2>

<p>Over the duration of this script, I saw chunk load time increase from 1m40s to
around an hour per million inserts. This is however better than not finishing at
all, which I wasn&rsquo;t able to achieve until making all changes suggested in this
post and using the aforementioned `load.sh&#8217; script. Other tips:</p>

<ul>
<li>use as few indices as you can</li>
<li>loading the data in sequential order not only makes the loading faster, but
the resulting table will be faster</li>
<li>if you can load any of the data from MySQL (instead of a flat file
intermediary), it will be much faster. You can use the `INSERT INTO ..
SELECT&#8217; statement to copy data between tables quickly.</li>
</ul>


<p>UPDATE: Since writing this article, I&rsquo;ve found even faster ways to load
this kind of data.  You can read more in the follow-up:</p>

<p><a href="http://derwiki.tumblr.com/post/29892583773/even-faster-loading-half-a-billion-rows-in-mysql">Even faster: loading half a billion rows in MySQL revisited&#8217;</a></p>

<p>Thanks for reading drafts of this to Greg and Lann, two of my
super-smart coworkers at Causes. Check out
<a href="http://www.causes.com/jobs">causes.com/jobs</a> if this sort of work interests you!</p>
]]></content>
  </entry>
  
</feed>
